"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var webSocket_1 = require("rxjs/webSocket");
var operators_1 = require("rxjs/operators");
var WebsocketOptionsDefaults_1 = __importDefault(require("../defaults/WebsocketOptionsDefaults"));
exports.streamCommand = {
    name: "stream",
    command: function (config) { return webSocket_1.webSocket(config); }
};
exports.streamRequestCommand = {
    name: "streamRequest",
    command: function (config, options) {
        Cypress.log({
            name: exports.streamRequestCommand.name
        });
        var streamOptions = Object.assign({}, WebsocketOptionsDefaults_1.default, options);
        var retryDelay = streamOptions.retryDelay, retryAttempts = streamOptions.retryAttempts, streamTimeout = streamOptions.streamTimeout, startUpMessage = streamOptions.startUpMessage, retryUntilFn = streamOptions.retryUntilFn, takeWhileFn = streamOptions.takeWhileFn;
        var streamConfig = {
            url: ""
        };
        if (typeof config === "string") {
            streamConfig.url = config;
        }
        else {
            streamConfig = Object.assign({
                openObserver: {
                    next: function () {
                        if (startUpMessage) {
                            stream.next(startUpMessage);
                        }
                    }
                }
            }, config);
        }
        var stream = webSocket_1.webSocket(streamConfig);
        return stream
            .pipe(operators_1.takeWhile(takeWhileFn, true), operators_1.reduce(function (acc, val) { return acc.concat([val]); }, []), 
        // If data is not ready, retry connection
        operators_1.switchMap(function (result) {
            return retryUntilFn(result)
                ? rxjs_1.of(result)
                : rxjs_1.throwError(new Error("Data not what was expected. Retrying connection."));
        }), operators_1.retryWhen(function (errors) {
            return errors.pipe(operators_1.delay(retryDelay), operators_1.take(retryAttempts), operators_1.concat(rxjs_1.throwError(new Error("Error connecting to WebSocket"))));
        }), operators_1.takeUntil(rxjs_1.timer(streamTimeout)))
            .toPromise();
    }
};
exports.addStreamCommands = function () {
    Cypress.Commands.add(exports.streamCommand.name, exports.streamCommand.command);
    Cypress.Commands.add(exports.streamRequestCommand.name, exports.streamRequestCommand.command);
};
